<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鼎阅Android团队</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-25T01:15:59.108Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>android-dingyuegroup</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我们眼中 RxJava 式的网络请求</title>
    <link href="http://yoursite.com/2019/02/23/best-practice-in-rxjava-network-method/"/>
    <id>http://yoursite.com/2019/02/23/best-practice-in-rxjava-network-method/</id>
    <published>2019-02-23T10:17:36.000Z</published>
    <updated>2019-02-25T01:15:59.108Z</updated>
    
    <content type="html"><![CDATA[<p>诞生 5 年之久的 RxJava，已经不只是一个开源库，可以说它的诞生<strong>改变了我们写代码的方式</strong>，把它比作「神兵利器」也毫不为过。<a id="more"></a>我们现在已经能看到各式各样名为「最佳实践」的使用教程，如果我们没能用好这把利器，不仅不会发挥它的作用，反而会伤着我们自己。</p><p>回顾它的诞生原因，是为了解决<strong>回调地狱</strong> (callback hell) 以及<strong>麻烦的线程切换</strong>。在 Android 开发中，哪个地方最会出现<strong>多层的回调嵌套</strong>以及<strong>频繁的线程切换</strong>呢？对！没错！是「网络请求」。所以 RxJava、Retrofit 这俩兄弟总会一起出现的，我们项目中关于 RxJava 的使用，也几乎都和网络请求相关。</p><h3 id="过去的经验"><a href="#过去的经验" class="headerlink" title="过去的经验"></a>过去的经验</h3><p>最初我们对 RxJava + Retrofit 的使用经验都是来源于 <a href="http://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="noopener">RxJava 与 Retrofit 结合的最佳实践</a> 这篇文章，相信大家都看过。这篇文章中的基本封装思想是：<u>订阅每个网络请求的流，将流的订阅结果再通过回调的方式返给流（也就是网络请求）的创建者。</u> 如下所示：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//HttpMethod</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getTopMovie</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ResultListener listener, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> count)</span></span>&#123;</span><br><span class="line">     movieService.getTopMovie(start, count)</span><br><span class="line">         .subscribeOn(Schedulers.io())</span><br><span class="line">         .unsubscribeOn(Schedulers.io())</span><br><span class="line">         .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">         .subscribe(<span class="hljs-keyword">new</span> Subscriber()&#123;</span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStart</span><span class="hljs-params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(Subject t)</span> </span>&#123;</span><br><span class="line">                 listener.onNext(t)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompleted</span><span class="hljs-params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//Activity</span></span><br><span class="line">HttpMethods.getInstance().getTopMovie(<span class="hljs-keyword">new</span> ResultListener()&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(Subject t)</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//handle result</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>)</span><br></pre></td></tr></table></figure><h4 id="有什么问题？"><a href="#有什么问题？" class="headerlink" title="有什么问题？"></a>有什么问题？</h4><p>这种封装方式，对于初步的使用以及简单的项目，是没有问题的。但是遇到复杂一点的网络请求，它的扩展性就不那么灵活了：</p><ol><li>多个连续的网络请求怎么写？按照上面的那种封装方式，我们有两种选择<ol><li>拆解这个请求，在 <code>subscribe</code> 之前通过 <code>flatMap</code> 发起第二个或者第三个网络请求。这种写法肯定会影响项目中已有的外部调用。</li><li>在 <code>onNext</code> 中发起第二个请求，再在第二个网络请求的 <code>onNext</code> 中发起第三个网络请求……这一层又一层的回调嵌套，正是用 RxJava 所能解决、避免的这样写，我们就又回到了最初的原点。</li></ol></li><li>怎么取消网络请求？不取消，意味着内存泄露的风险。</li></ol><h3 id="回到-RxJava-本身"><a href="#回到-RxJava-本身" class="headerlink" title="回到 RxJava 本身"></a>回到 RxJava 本身</h3><p>RxJava 提供给我们的、我们所中意的强大之处在哪？在于它的「操作符」，<code>map</code>、<code>flatMap</code>、<code>zip</code> 等等，甚至线程的切换 <code>subscribeOn</code>、<code>observeOn</code> 也是操作符。RxJava 的各种强大的功能就是通过各式各样的「操作符」实现的。</p><p>操作符操作的是什么？流。流（<code>Observable</code>、<code>Flowable</code>）是 RxJava 的基本单位。所以一套链式请求拆开应该是这样的：</p><center><br><img src="https://ws1.sinaimg.cn/large/82890cf6ly1g0f0iljmz1j20kv0bajse.jpg" width="380px"><br></center><p><br><br>所以说，网络请求库对外提供网络请求的结果应该是以「流」的形式进行提供：</p><ul><li>单个网络请求，对外提供单个「流」</li><li>多个网络请求，将多个网络请求结果流通过「操作符」组合成一个「流」对外提供</li><li>持久化：网络请求结果流和持久化的缓存流，总能通过「操作符」组合成一个对外提供的结果「流」</li></ul><h3 id="我们需要背压吗？"><a href="#我们需要背压吗？" class="headerlink" title="我们需要背压吗？"></a>我们需要背压吗？</h3><p>当生产者大于消费者，<del>则市场价格会降低，</del>则会产生背压问题（Backpressure）。解决背压有很多种策略，RxJava2 中的 <code>Flowable</code> 天然支持背压。所以 <code>Flowable</code> 这个万金油，不管三七二十一，直接拿来用是没有问题的。</p><p>但是，<strong>网络请求，会产生背压问题吗？不会，为了防止抬杠，可以说大部分情况下是不会的。</strong>网络请求的每一个流，即用即走，上游的生产者（<code>Request</code>）和下游的消费者(<code>Responese</code>)，永远是一对一的关系，不会出现连续的事件流。杀鸡焉用牛刀，所以我们可以退一步，改用 <code>Observable</code>。</p><p>网络请求不会出现连续的事件流，在 <code>onNext</code> 出现之后，<code>onComplete</code> 马上就会被调用，所以只需要这两者中的一个就够了，也就不用考虑 <code>Observable</code>，同样 <code>Maybe</code> 也是可以排除的。</p><p>剩下的也就只有 <code>Single</code> 和 <code>Completable</code> 了，相对于 <code>Single</code>，<code>Completable</code> 没有 <code>map</code> 和 <code>flatMap</code> 方法。所以需要进一步处理网络请求结果的我们，可以选择使用 <code>Single</code>。</p><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p>网络请求过程，协议层的异常会自动抛至 <code>onError()</code> ，如 404、503 错误。对于如下<strong>有请求结果但无目标请求数据</strong>，我们也应当作为异常来处理：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"code"</span>: <span class="hljs-string">"6002"</span>,</span><br><span class="line">    <span class="hljs-attr">"msg"</span>: <span class="hljs-string">"公钥为空"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>毕竟这样的请求结果，是后端经过异常处理返回给我们的。</p><p>假定我们的请求结果是这样的范式：</p><figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">data</span> CommonResult&lt;T&gt;(</span><br><span class="line">    <span class="hljs-keyword">var</span> code: <span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span>,</span><br><span class="line">    <span class="hljs-keyword">var</span> <span class="hljs-keyword">data</span>: T? = <span class="hljs-literal">null</span>,</span><br><span class="line">    <span class="hljs-keyword">var</span> message: String? = <span class="hljs-literal">null</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们活用 RxJava 的操作符，用 <code>map</code> 来处理请求到的 <code>ResponseBody</code> (这也是前面选择 Single 的原因)，为了便于复用，可以定义一个这样的 mapper:</p><figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonResultMapper</span>&lt;<span class="hljs-type">T</span>&gt; : <span class="hljs-type">Function</span>&lt;<span class="hljs-type">CommonResult&lt;T</span>&gt;, <span class="hljs-type">T&gt; &#123;</span></span></span><br><span class="line">    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">apply</span><span class="hljs-params">(t: <span class="hljs-type">CommonResult</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span>: T &#123;</span><br><span class="line">        <span class="hljs-keyword">val</span> <span class="hljs-keyword">data</span> = t.<span class="hljs-keyword">data</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (t.code == SUCCESS_CODE &amp;&amp; <span class="hljs-keyword">data</span> != <span class="hljs-literal">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">data</span></span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">//抛出异常</span></span><br><span class="line">            <span class="hljs-keyword">throw</span> Throwable(<span class="hljs-string">"请求 <span class="hljs-variable">$t</span> 失败"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这个定义好的 mapper：</p><figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@GET(PUSH_URL)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fetchTag</span><span class="hljs-params">(<span class="hljs-meta">@Query(<span class="hljs-meta-string">"udid"</span>)</span> udid: <span class="hljs-type">String</span>)</span></span>: Single&lt;CommonResult&lt;Tag&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fetchTagResult</span><span class="hljs-params">(udid: <span class="hljs-type">String</span>)</span></span>: Single&lt;Tag&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> netService.fetchTag(udid)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .map(CommonResultMapper())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你愿意，你还可以将<strong>线程切换</strong>和<strong>数据处理</strong>结合在一起，使用 RxJava 的 <code>Transformer</code></p><figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//定义一个 transformer</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-title">resultTransformer</span><span class="hljs-params">()</span></span>: SingleTransformer&lt;CommonResult&lt;T&gt;, T&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> SingleTransformer &#123; single -&gt;</span><br><span class="line">        single.subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .map(CommonResultMapper())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//使用</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fetchTagResult</span><span class="hljs-params">(udid: <span class="hljs-type">String</span>)</span></span>: Single&lt;Tag&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> netService.fetchTag(udid)</span><br><span class="line">        .compose(resultTransformer())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这样封装，结果归结果，异常归异常。</p><figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fetchTagResult(<span class="hljs-string">"123321"</span>)</span><br><span class="line">    .subscribeBy(</span><br><span class="line">        onSuccess = &#123; tag -&gt;</span><br><span class="line">            <span class="hljs-comment">//结果</span></span><br><span class="line">        &#125;,</span><br><span class="line">        onError = &#123; e -&gt;</span><br><span class="line">            <span class="hljs-comment">//异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>回顾上图中的<strong>对内封装</strong>和<strong>对外可见</strong>，在得到真正想要的网络请求结果之前，需要一直保持<strong>对内封装</strong>的状态。因此，如果需要同时或者按顺序发起多个网络请求，那么就应该在<strong>对内封装</strong>中进行操作，例如可以使用 <code>flatMap</code> 按顺序发起第二个网络请求：</p><figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fetchUserSingle</span><span class="hljs-params">(tag: <span class="hljs-type">Tag</span>)</span></span>: Single&lt;User&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> netService.fetchUser(tag)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fetchUserResult</span><span class="hljs-params">(udid: <span class="hljs-type">String</span>)</span></span>: Single&lt;User&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> netService.fetchTag(udid)</span><br><span class="line">        .compose(resultTransformer())</span><br><span class="line">        .flatMap&#123; tag -&gt;</span><br><span class="line">            <span class="hljs-comment">//使用第一个请求的结果作为第二个请求的参数</span></span><br><span class="line">            <span class="hljs-keyword">return</span><span class="hljs-symbol">@flatMap</span> fetchUserSingle(tag)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论如何，善用<strong>操作符</strong>，我们的代码总会是「链式」的。</p><h3 id="取消网络请求与内存泄漏"><a href="#取消网络请求与内存泄漏" class="headerlink" title="取消网络请求与内存泄漏"></a>取消网络请求与内存泄漏</h3><p>最后还需要关注一下这里的内存泄漏问题，在 <code>Activity</code> 销毁时，要及时取消掉这些已经失去上下文意义的网络请求。这里我们及时 <code>unsubscribe</code> 就好了。</p><p>同时在管理生命周期方面，也有更成熟的方案：<a href="https://github.com/trello/RxLifecycle" target="_blank" rel="noopener">RxLifecycle</a>。</p><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;诞生 5 年之久的 RxJava，已经不只是一个开源库，可以说它的诞生&lt;strong&gt;改变了我们写代码的方式&lt;/strong&gt;，把它比作「神兵利器」也毫不为过。&lt;/p&gt;
    
    </summary>
    
    
      <category term="RxJava" scheme="http://yoursite.com/tags/RxJava/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>build:gradle 3.0 以及 Support Library 27.1.0 带来的 Api 变动</title>
    <link href="http://yoursite.com/2018/09/03/new-api-in-gradle-3-0-and-support-library-27-1-0/"/>
    <id>http://yoursite.com/2018/09/03/new-api-in-gradle-3-0-and-support-library-27-1-0/</id>
    <published>2018-09-03T10:03:37.000Z</published>
    <updated>2019-01-27T11:35:54.708Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Google</strong> 又双叒升级了 <strong>Android</strong> 的开发库，我们将根目录下的 <code>build:gradle</code> 版本由原先的 <code>2.3.3</code> 升级至 <code>3.1.2</code>，随之带来的问题是 <code>Support Library</code> 也需要升级。升级之后，<code>gradle</code> 脚本以及 <code>support</code> 包下相关类的 <strong>Api</strong> 发生了重大的改动。具体需要注意的改动如下：<br><a id="more"></a></p><h3 id="build-gradle-文件"><a href="#build-gradle-文件" class="headerlink" title="build.gradle 文件"></a>build.gradle 文件</h3><p>引入依赖的方式由原来的 <code>compile</code> 变更为现在的 <code>implementation</code> 和 <code>api</code> 关键字，这两个关键字的区别在于是否能传递依赖，例如：<br><br><img src="https://www.superbed.cn/pic/5bd97ee19dc6d6216adec667" style="width:400px;" align="center"></p><blockquote><p>注意：使用旧的关键字 <code>compile</code> 进行依赖应用并不会报错，只会报警告。使用 <code>implementation</code> 可以提升编译速度。</p></blockquote><h3 id="Support-Library-27"><a href="#Support-Library-27" class="headerlink" title="Support Library 27"></a>Support Library 27</h3><p>新的 <code>support</code> 包带来便捷的新特性，如自带生命周期组件中的 <code>android.arch.lifecycle:runtime</code> 库，但对现有代码对兼容带来不小的麻烦。</p><p>⚠️最明显的变化就是 <code>Fragment</code> 中的 <code>getActivity()</code> 以及 <code>getContext()</code> 方法返回的被标记为 <code>@Nullable</code>, 也就是返回值可能为  <code>null</code> , 于是在 Kotlin 中所有获取 <code>Activity</code>、<code>Context</code> 实例的地方都需要判空操作。</p><p>其实 Google 并没有更改代码逻辑，返回 <code>null</code> 是因为 <code>fragment</code> 没有加入到 <code>actiivty</code> 中，这个逻辑处理之前的版本就存在，只是相比之前加上 <code>@Nullable</code> 注解，具体可以看这里的解释：<a href="https://stackoverflow.com/a/49289578/7077907" target="_blank" rel="noopener">https://stackoverflow.com/a/49289578/7077907</a> 。</p><p><strong>如何更好的兼容之前的代码？</strong>直接加 <code>!!</code> 处理是没有问题的，如果你觉得这样写过于丑陋并且看起来十分危险，可以用 <code>activity ? : return</code> 这样的写法代替，或者更好的方式是使用 <strong>Google</strong> 新提供的方法：</p><figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requireActivity()</span><br><span class="line">requireContext()</span><br></pre></td></tr></table></figure><p>这两个方法的返回值是不为 <code>null</code> 的，内部作了判空抛异常处理。具体文档可看源码或这里：<a href="https://developer.android.com/topic/libraries/support-library/revisions#27-1-0" target="_blank" rel="noopener">https://developer.android.com/topic/libraries/support-library/revisions#27-1-0</a></p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Google&lt;/strong&gt; 又双叒升级了 &lt;strong&gt;Android&lt;/strong&gt; 的开发库，我们将根目录下的 &lt;code&gt;build:gradle&lt;/code&gt; 版本由原先的 &lt;code&gt;2.3.3&lt;/code&gt; 升级至 &lt;code&gt;3.1.2&lt;/code&gt;，随之带来的问题是 &lt;code&gt;Support Library&lt;/code&gt; 也需要升级。升级之后，&lt;code&gt;gradle&lt;/code&gt; 脚本以及 &lt;code&gt;support&lt;/code&gt; 包下相关类的 &lt;strong&gt;Api&lt;/strong&gt; 发生了重大的改动。具体需要注意的改动如下：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/09/03/hello-world/"/>
    <id>http://yoursite.com/2018/09/03/hello-world/</id>
    <published>2018-09-03T02:03:37.000Z</published>
    <updated>2019-01-27T11:36:12.958Z</updated>
    
    <content type="html"><![CDATA[<p>Hello, World !<br><a id="more"></a><br>Hello, Hexo ! <br><br>你好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello, World !&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
</feed>
